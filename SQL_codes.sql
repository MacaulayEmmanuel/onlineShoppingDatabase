-- database: c:\Users\EMMANUEL\Desktop\Online Shopping Database_SQL Project\onlineShopping.db

-- Use the â–· button in the top right corner to run the entire file.


-- the Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    Description VARCHAR(200),
    Price DECIMAL(10,2) NOT NULL
);

-- sample data to the Products table
INSERT INTO Products (ProductID, Name, Description, Price)
VALUES
    (1, 'Smartphone', 'A high-end smartphone with a large screen', 999.99),
    (2, 'Tablet', 'A portable device with a large touch screen', 599.99),
    (3, 'Laptop', 'A powerful computer with a long battery life', 1299.99);

-- the Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    ShippingAddress VARCHAR(200) NOT NULL
);

-- sample data to the Customers table
INSERT INTO Customers (CustomerID, FirstName, LastName, Email, ShippingAddress)
VALUES
    (1, 'Emmanuel', 'Macaulay', 'emmanuelmac@example.com', '123 Main St, Ogun Nigeria'),
    (2, 'Lod', 'Nael', 'lodnael@example.com', '456 Elm St, Accra GHA');

-- the Orders table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDate DATETIME NOT NULL,
    CustomerID INT NOT NULL,
    TotalCost DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- sample data to the Orders table
INSERT INTO Orders (OrderID, OrderDate, CustomerID, TotalCost)
VALUES
    (1, '2022-04-23 14:30:00', 1, 999.99),
    (2, '2022-04-24 10:00:00', 2, 1299.99);

-- the OrderDetails table
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    Price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- sample data to the OrderDetails table
INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, Price)
VALUES
    (1, 1, 1, 1, 999.99),
    (2, 2, 3, 2, 2599.98);

-- Query: Retrieve all products with their prices and descriptions
SELECT Name, Price, Description FROM Products;

-- Query: Retrieve all customers and their shipping addresses
SELECT FirstName, LastName, Email, ShippingAddress FROM Customers;

-- Query: Retrieve all orders with their order details
SELECT o.OrderID, o.OrderDate, c.FirstName, c.LastName, od.ProductID, p.Name, od.Quantity, od.Price
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID;

-- Query: Calculate the total revenue generated by the online store
SELECT SUM(TotalCost) AS TotalRevenue FROM Orders;

-- Query: Update the price of the Tablet to $699.99
UPDATE Products SET Price = 699.99 WHERE ProductID = 2;

-- Query: Delete the order with OrderID = 2 and its corresponding order details
-- DELETE FROM Orders WHERE OrderID = 2;

-- View for Total Revenue
CREATE VIEW total_revenue AS
SELECT SUM(od.quantity * od.price) AS revenue
FROM orders o
JOIN order_details od ON o.order_id = od.order_id;

/*
This view calculates the total revenue
 generated by the online store by joining 
 the orders and order_details tables, 
 and summing the product of the quantity and 
 price for each order detail.
*/

SELECT * FROM total_revenue ;

--View for Top-Selling Products
CREATE VIEW top_selling_products AS
SELECT p.product_id, p.product_name, SUM(od.quantity) AS total_quantity_sold
FROM products p
JOIN order_details od ON p.product_id = od.product_id
GROUP BY p.product_id
ORDER BY total_quantity_sold DESC;

/*
This view lists the top-selling products
 by joining the products and order_details tables,
 and grouping the results by product ID, 
 then sorting by the total quantity sold in 
 descending order.
*/

SELECT * FROM top_selling_products;



